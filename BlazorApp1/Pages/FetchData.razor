@page "/fetchdata"

<PageTitle>Resulta</PageTitle>

@using BlazorApp1.Data
@using Results.Contract
@inject ResultService ResultServiceX;

@if (result?.TeamResults == null)
{
    <p>
        <em>Loading...</em>
    </p>
}
else
{
    <table class="table" style="font-size: large">
        <thead>
        <tr>
            <th>Placering</th>
            <th>Lag</th>
            <th>Poäng</th>
        </tr>
        </thead>
        <tbody>
            @foreach (var teamResult in result.TeamResults ?? Array.Empty<TeamResult>())
        {
                <tr style="@(teamResult.IsPreliminary ? "font-style: italic" : "")">
                <td>@teamResult.Pos</td>
                <td>@teamResult.Team</td>
                <td>@teamResult.Points</td>
            </tr>
        }
        </tbody>
    </table>
    <table class="table">
        <thead>
            <tr>
                <th>Ej aktiverade</th>
                <th>Startade</th>
                <th>Godkända</th>
                <th>Ej godkända</th>
                <th>Ej star</th>
            </tr>
        </thead>
        <tbody>
            <tr>
                <td>@result.Statistics.NumNotActivated</td>
                <td>@result.Statistics.NumActivated</td>
                <td>@result.Statistics.NumPassed</td>
                <td>@result.Statistics.NumNotValid</td>
                <td>@result.Statistics.NumNotStarted</td>
            </tr>
        </tbody>
    </table>

}

@code {
    private Result? result;

    protected override async Task OnInitializedAsync()
    {
        result = await ResultServiceX.GetTeamResultsAsync();

        //ResultServiceX.NewResutls += ResultService_OnNewResults;
    }

    protected override void OnParametersSet()
    {
        base.OnParametersSet();
    }

    private void ResultService_OnNewResults(object? sender, EventArgs e)
    {
        InvokeAsync(() => this.StateHasChanged());
    }
}