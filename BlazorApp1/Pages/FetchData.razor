@page "/fetchdata"

<PageTitle>Weather forecast</PageTitle>

@using BlazorApp1.Data
@using Results.Contract
@inject WeatherForecastService ForecastService
@inject ResultService ResultServiceX;

@if (teamResults == null)
{
    <p>
        <em>Loading...</em>
    </p>
}
else
{
    <table class="table" style="font-size: large">
        <thead>
        <tr>
            <th>Placering</th>
            <th>Lag</th>
            <th>Poäng</th>
        </tr>
        </thead>
        <tbody>
        @foreach (var teamResult in teamResults ?? Array.Empty<TeamResult>())
        {
                <tr style="@(teamResult.IsPreliminary ? "font-style: italic" : "")">
                <td>@teamResult.Pos</td>
                <td>@teamResult.Team</td>
                <td>@teamResult.Points</td>
            </tr>
        }
        </tbody>
    </table>
@*    <table class="table">
        <thead>
            <tr>
                <th>Date</th>
                <th>Temp. (C)</th>
                <th>Temp. (F)</th>
                <th>Summary</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var forecast in forecasts)
            {
                <tr>
                    <td>@forecast.Date.ToShortDateString()</td>
                    <td>@forecast.TemperatureC</td>
                    <td>@forecast.TemperatureF</td>
                    <td>@forecast.Summary</td>
                </tr>
            }
        </tbody>
    </table>
*@
}

@code {
    private TeamResult[]? teamResults;

    protected override async Task OnInitializedAsync()
    {
        teamResults = await ResultServiceX.GetTeamResultsAsync();

        //ResultServiceX.NewResutls += ResultService_OnNewResults;
    }

    protected override void OnParametersSet()
    {
        base.OnParametersSet();
    }

    private void ResultService_OnNewResults(object? sender, EventArgs e)
    {
        InvokeAsync(() => this.StateHasChanged());
    }
}