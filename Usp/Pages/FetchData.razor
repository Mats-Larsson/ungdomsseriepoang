@page "/fetchdata"

<PageTitle>Results</PageTitle>

<link rel="stylesheet" href="css/usp.css"/>

@using System.Diagnostics.CodeAnalysis
@using Microsoft.AspNetCore.WebUtilities;
@using Results.Contract
@using System.Globalization
@using ResultService = Usp.Data.ResultService
@inject ResultService ResultService;
@inject NavigationManager NavManager;

@if (result?.TeamResults == null)
{
    <p>
        <em>Loading...</em>
    </p>
}
else
{
    @* ReSharper disable MarkupTextTypo, ReSharper disable CommentTypo *@
    @* TODO: Indigera om data inte kan hämtas från ResultSourceType *@

    <div class="fetch-data-page">

        <div style="-webkit-column-count: @columns; column-count: @columns; column-rule: solid lightgray thin;">
            <table class="table" style="font-size: @fontSize">
                <thead>
                <tr>
                    <th class="text-right w-5">Pos</th>
                    <th class="text-center w-10">Trend</th>
                    <th class="text-left w-50">Lag</th>
                    @if (isVerbose) { <th class="text-right w-15" title="Antal: Ej aktiverade/Har checkat vid starten">Ej akt./I skogen</th> }
                    @if (isVerbose) { <th class="text-right w-5">Diff uppåt</th> }
                    @if (isVerbose) { <th class="text-right w-10" title="Poäng från tidigare + poäng idag = totalpoäng">Poäng</th> }
                    @if (isVerbose) { <th class="text-right w-10" title="Minst en löpare har preliminär poäng">Prel</th> }
                    @if (!isVerbose) { <th class="text-right w-10">Poäng</th> }
                </tr>
                </thead>
                <tbody>
                @foreach (var teamResult in result.TeamResults)
                {
                    var stats = teamResult.Statistics;
                    var trend = trends.TryGetValue(teamResult.Team, out var value) ? value : 0;
                    <tr>
                        <td class="text-right">@teamResult.Pos</td>
                        @switch (trend)
                        {
                            case 1:
                                <td class="text-center arrow up">↑</td>
                                break;
                            case -1:
                                <td class="text-center arrow down">↓</td>
                                break;
                            case 0:
                                <td class="text-center"></td>
                                break;
                        }
                        <td class="text-left">@teamResult.Team</td>
                        @if (isVerbose) { <td class="text-right">@(stats.NumNotActivated)/@(stats.NumActivated + stats.NumStarted)</td> }
                        @if (isVerbose) { <td class="text-right">@teamResult.DiffPointsUp</td> }
                        @if (isVerbose) {
                            if (teamResult.BasePoints > 0)
                            {
                                <td class="text-black text-right"><i>@teamResult.BasePoints</i>+@(teamResult.Points - teamResult.BasePoints)=<b>@teamResult.Points</b></td>
                            }
                            else
                            {
                                <td class="text-right"><b>@teamResult.Points</b></td>
                            }
                        }
                        @if (isVerbose) { <td class="text-center">@(teamResult.IsPreliminary ? "P" : "")</td> }
                        @if (!isVerbose) { <td class="text-right">@teamResult.Points</td> }
                    </tr>
                }
                </tbody>
            </table>
        </div>

        <hr/>

        <div class="footer text-center">
            <table class="table table-light">
                <thead>
                <tr>
                    <th>Senasta ändrad</th>
                    <th>Ej aktiverade</th>
                    <th>Checkade/Startade</th>
                    <th hidden="@(!ResultService.SupportsPreliminary)">Preliminära</th>
                    <th>Godkända</th>
                    <th>Ej godkända</th>
                    <th>Ej start</th>
                </tr>
                </thead>
                <tbody>
                <tr>
                    <td>@result.Statistics.LastChangedTimeOfDay.ToString(@"hh\:mm\:ss")</td>
                    <td>@result.Statistics.NumNotActivated</td>
                    <td>@(result.Statistics.NumActivated + result.Statistics.NumStarted)</td>
                    <td hidden="@(!ResultService.SupportsPreliminary)">@result.Statistics.NumPreliminary</td>
                    <td>@result.Statistics.NumPassed</td>
                    <td>@result.Statistics.NumNotValid</td>
                    <td>@result.Statistics.NumNotStarted</td>
                </tr>
                </tbody>
            </table>
        </div>
    </div>

    @* ReSharper restore MarkupTextTypo *@
}

@code {
    private Result? result;
    private int columns = 2;
    private string fontSize = "1vw";
    private bool isVerbose;

    private IDictionary<string, int>? prevPoss;
    private IDictionary<string, int>? poss;
    private IDictionary<string, int> trends = new Dictionary<string, int>();

    protected override async Task OnInitializedAsync()
    {
        var uri = NavManager.ToAbsoluteUri(NavManager.Uri);
        columns = GetQueryParamFirstOrDefault(uri, "columns", 2);
        fontSize = string.Format(CultureInfo.InvariantCulture, "{0}vw", GetQueryParamFirstOrDefault(uri, "textsize", 100.0) / 100.0);
        isVerbose = GetQueryParamFirstOrDefault(uri, "verbose", "false") != "false";
        result = await ResultService.GetTeamResultsAsync();
        ResultService.OnNewResults += ResultService_OnNewResults;
    }


    private void ResultService_OnNewResults(object? sender, EventArgs e)
    {
        result = ResultService.GetTeamResultsAsync().Result;
        CalcTrend();
        InvokeAsync(StateHasChanged);
    }

    [SuppressMessage("ReSharper", "ConvertIfStatementToReturnStatement")]
    private void CalcTrend()
    {
        if (result == null)
            return;
        poss = result.TeamResults.ToDictionary(tr => tr.Team, tr => tr.Pos);
        if (prevPoss == null)
        {
            prevPoss = poss;
            return;
        }
        if (EqualPos(poss, prevPoss)) return;

        trends = poss.Select(pos =>
            {
                var prevPos = prevPoss.TryGetValue(pos.Key, out var value) ? value : 0;
                if (pos.Value < prevPos) return (pos.Key, 1);
                if (pos.Value > prevPos) return (pos.Key, -1);
                return (pos.Key, 0);
            })
            .ToDictionary(t => t.Key, t => t.Item2);

        prevPoss = poss;
    }

    private static bool EqualPos(IDictionary<string, int> positions1, IDictionary<string, int> positions2)
    {
        if (positions1.Count != positions2.Count) return false;

        foreach (var pos1 in positions1)
        {
            if (!positions2.TryGetValue(pos1.Key, out var pos2Value)) return false;
            if (pos1.Value != pos2Value) return false;
        }
        return true;
    }

    private static T GetQueryParamFirstOrDefault<T>(Uri uri, string name, T defaultValue)
    {
        var stringValues = QueryHelpers.ParseQuery(uri.Query).GetValueOrDefault(name);
        if (!stringValues.Any()) return defaultValue;
        var stringValue = stringValues[0];
        if (stringValue == null) return defaultValue;
        var convertedValue = Convert.ChangeType(stringValue, typeof(T), CultureInfo.InvariantCulture);
        return (T)convertedValue;
    }
}